{"version":3,"sources":["serviceWorker.ts","lib/data/hlist.ts","lib/context.ts","lib/dsl.ts","lib/data/next.ts","lib/widgets.ts","lib/react.tsx","lib/sample.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","nil","type","length","cons","value","prev","pop","list","equals","a","b","currA","currB","getLast","fa","O","toArray","len","r","Array","l","i","initialWidgetBuilderState","currentId","hlist","initialWidgetState","activeId","pressedId","focusedId","inputBuffer","inputBufferState","focusTrap","setActiveId","state","Object","objectSpread","setFocusedId","setInputBuffer","optionHList","isCurrentlyActive","ctx","render","dsl","cont","suspendAndResume","effect","fold","onRender","onContinue","onHalt","onResumeAndContinue","tr","strings","_len","arguments","values","_key","id","widget","pipe","S","text","_","N","D","container","_len2","builders","_key2","A","sequence","widgets","initialState","fas","agglomerate","currentState","currentIndex","outDsl","push","dsls","children","input","onChange","C","canActivate","canDeactivate","isCurrentlyFocused","wantsActivation","I","currentValue","active","focused","number","fn","isNaN","parseInt","isValidInteger","toFixed","prevState","newValue","RenderInput","React","props","ref","current","document","activeElement","focus","react","readOnly","e","dispatch","target","onFocus","onBlur","style","border","RenderText","t","map","s","join","RenderContainer","child","RenderDsl","assign","key","JSON","stringify","AppRunner","_React$Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","app","eventLoop","lastState","numLoops","nextState","getApp","console","warn","f","setState","inherits","createClass","_this2","_this3","output","newState","appModel","name","surname","age","App","react_AppRunner","model","update","W","_templateObject","_templateObject2","_templateObject3","_templateObject4","log","ReactDOM","react_default","createElement","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c88762e3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as O from \"fp-ts/lib/Option\";\r\n\r\n// HList implementation\r\ninterface Nil {\r\n  type: \"nil\";\r\n  length: 0;\r\n}\r\nexport const nil: Nil = { type: \"nil\", length: 0 };\r\ninterface Cons<A> {\r\n  type: \"cons\";\r\n  value: A;\r\n  length: number;\r\n  prev: HList<A>;\r\n}\r\nexport type HList<A> = Cons<A> | Nil;\r\nexport const cons: <A>(value: A, prev: HList<A>) => HList<A> = (\r\n  value,\r\n  prev\r\n) => ({ type: \"cons\", value, prev, length: prev.length + 1 });\r\nexport const pop: <A>(list: HList<A>) => HList<A> = list =>\r\n  list.type === \"nil\" ? list : list.prev;\r\n\r\nexport function equals<A>(a: HList<A>, b: HList<A>) {\r\n  let currA = a;\r\n  let currB = b;\r\n  while (true) {\r\n    switch (currA.type) {\r\n      case \"nil\":\r\n        return currB.type === \"nil\";\r\n      case \"cons\":\r\n        if (currB.type === \"cons\" && currA.value === currB.value) {\r\n          currA = currA.prev;\r\n          currB = currB.prev;\r\n        } else {\r\n          return false;\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\nexport const getLast: <A>(fa: HList<A>) => O.Option<A> = fa =>\r\n  fa.type === \"nil\" ? O.none : O.some(fa.value);\r\n\r\nexport const toArray = <A>(list: HList<A>): Array<A> => {\r\n  const len = list.length;\r\n  const r: Array<A> = new Array(len);\r\n  let l: HList<A> = list;\r\n  let i = 1;\r\n  while (l.type !== \"nil\") {\r\n    r[len - i] = l.value;\r\n    i++;\r\n    l = l.prev;\r\n  }\r\n  return r;\r\n};\r\n","import * as hlist from \"./data/hlist\";\r\nimport * as O from \"fp-ts/lib/Option\";\r\n\r\n\r\nexport type ID = hlist.HList<string>;\r\n\r\nexport interface WidgetBuilderState {\r\n  currentId: ID;\r\n}\r\nexport const initialWidgetBuilderState: WidgetBuilderState = {\r\n  currentId: hlist.nil\r\n};\r\n\r\nexport interface WidgetState {\r\n  pressedId: O.Option<ID>   // ID of the widget being pressed\r\n  focusedId: O.Option<ID>   // ID of the widget which has currently focus, may be different from the active one.\r\n  activeId: O.Option<ID>    // ID of the widget which is currently active, meaning that edit can occur\r\n  inputBuffer: O.Option<string> // editing value of a text input\r\n  inputBufferState: \"dirty\" | \"valid\" | \"invalid\"\r\n  focusTrap: boolean;\r\n}\r\nexport const initialWidgetState: WidgetState = {\r\n  activeId: O.none,\r\n  pressedId: O.none,\r\n  focusedId: O.none,\r\n  inputBuffer: O.none,\r\n  inputBufferState: \"dirty\",\r\n  focusTrap: false\r\n};\r\n\r\nexport const pushId: (id: string) => (ctx: WidgetBuilderState) => WidgetBuilderState = id => ctx => ({...ctx, currentId: hlist.cons(id, ctx.currentId)})\r\nexport const popId: () => (ctx: WidgetBuilderState) => WidgetBuilderState = () => ctx => ({...ctx, currentId: hlist.pop(ctx.currentId)})\r\n\r\n\r\nexport function setActiveId(activeId: O.Option<ID>): (state: WidgetState) => WidgetState {\r\n  return state => ({...state, activeId })\r\n}\r\n\r\nexport function setFocusedId(focusedId: O.Option<ID>): (state: WidgetState) => WidgetState {\r\n  return state => ({...state, focusedId })\r\n}\r\n\r\nexport function setInputBuffer(inputBuffer: O.Option<string>): (state: WidgetState) => WidgetState {\r\n  return state => ({...state, inputBuffer, inputBufferState: \"dirty\" })\r\n}\r\nexport function setInputBufferState(inputBufferState: WidgetState[\"inputBufferState\"]): (state: WidgetState) => WidgetState {\r\n  return state => ({...state, inputBufferState })\r\n}\r\n\r\nconst optionHList = O.getEq(hlist)\r\n\r\nexport function isCurrentlyActive(ctx: WidgetBuilderState, state: WidgetState): boolean {\r\n  return optionHList.equals(O.some(ctx.currentId), state.activeId)\r\n}\r\n\r\nexport function isCurrentlyPressed(ctx: WidgetBuilderState, state: WidgetState): boolean {\r\n  return optionHList.equals(O.some(ctx.currentId), state.pressedId)\r\n}\r\n\r\nexport function isCurrentlyFocused(ctx: WidgetBuilderState, state: WidgetState): boolean {\r\n  return optionHList.equals(O.some(ctx.currentId), state.focusedId)\r\n}\r\n\r\nexport function canActivate(ctx: WidgetBuilderState, state: WidgetState): boolean {\r\n  return !state.focusTrap && O.isNone(state.activeId) && !isCurrentlyActive(ctx, state)\r\n}\r\nexport function canDeactivate(ctx: WidgetBuilderState, state: WidgetState): boolean {\r\n  return !state.focusTrap && isCurrentlyActive(ctx, state)\r\n}","import * as S from \"fp-ts/lib/State\";\r\nimport * as hlist from \"./data/hlist\";\r\nimport * as I from \"fp-ts/lib/IO\";\r\n\r\nexport type ID = hlist.HList<string>;\r\n\r\nexport type TranslableString = { type: \"translable_string\", strings: TemplateStringsArray, values: string[] };\r\n\r\n\r\n\r\nexport type DSL =\r\n  | { type: \"text\"; id: ID; text: TranslableString }\r\n  | { type: \"button\"; id: ID; text: TranslableString }\r\n  | { type: \"container\"; id: ID; children: DSL[] }\r\n  | { type: \"input\"; id: ID; value: string; active: boolean; focused: boolean };\r\n\r\nexport const text: (id: ID, text: TranslableString) => DSL = (id, text) => ({\r\n  type: \"text\",\r\n  id,\r\n  text\r\n});\r\nexport const container: (id: ID, children: DSL[]) => DSL = (id, children) => ({\r\n  type: \"container\",\r\n  id,\r\n  children\r\n});\r\nexport const button: (id: ID, text: TranslableString) => DSL = (id, text) => ({\r\n  type: \"button\",\r\n  id,\r\n  text\r\n});\r\nexport const input: (id: ID, value: string, active: boolean, focused: boolean) => DSL = (\r\n  id,\r\n  value,\r\n  active,\r\n  focused\r\n) => ({ type: \"input\", id, value, active, focused });\r\n","import * as I from \"fp-ts/lib/IO\";\r\nimport { URIS, Kind } from \"fp-ts/lib/HKT\";\r\n\r\nexport type Next<U extends URIS, S, A> =\r\n  | { type: \"render\"; dsl: A }\r\n  | { type: \"continue\"; state: S }\r\n  | { type: \"halt\"; state: S }\r\n  | { type: \"suspendAndResume\"; effect: Kind<U, S> };\r\n\r\nexport const render: <U extends URIS, A, S>(dsl: A) => Next<U, S, A> = dsl => ({\r\n  type: \"render\",\r\n  dsl\r\n});\r\nexport const halt: <U extends URIS, A, S>(state: S) => Next<U, S, A> = state => ({\r\n  type: \"halt\",\r\n  state\r\n});\r\nexport const cont: <U extends URIS, A, S>(state: S) => Next<U, S, A> = state => ({\r\n  type: \"continue\",\r\n  state\r\n});\r\nexport const suspendAndResume: <U extends URIS, A, S>(\r\n  effect: Kind<U, S>\r\n) => Next<U, S, A> = effect => ({ type: \"suspendAndResume\", effect });\r\n\r\nexport const fold: <U extends URIS, S, A, B>(\r\n    onRender: (dsl: A) => B,\r\n    onContinue: (state: S) => B,\r\n    onHalt: (state: S) => B,\r\n    onSuspendAndResume: (effect: Kind<U, S>) => B\r\n) => (fa: Next<U, S, A>) => B = (onRender, onContinue, onHalt, onResumeAndContinue) => fa => {\r\n    switch (fa.type) {\r\n      case \"render\":\r\n        return onRender(fa.dsl);\r\n      case \"continue\":\r\n        return onContinue(fa.state);\r\n      case \"halt\":\r\n        return onHalt(fa.state);\r\n      case \"suspendAndResume\":\r\n        return onResumeAndContinue(fa.effect);\r\n    }\r\n}\r\n\r\n// TODO: I don't know exactly, but this seems like a job a foldable instance would love to do.\r\nexport function reduce<U extends URIS, L, A>(\r\n    initialState: L,\r\n    fas: ((l: L) => Next<U, L, A>)[],\r\n    agglomerate: (a: A[]) => A\r\n  ): Next<U, L, A> {\r\n    let currentState = initialState;\r\n    let currentIndex = 0;\r\n    let outDsl: any[] = [];\r\n    while (currentIndex < fas.length) {\r\n      const fa = fas[currentIndex](currentState);\r\n      switch (fa.type) {\r\n        case \"render\":\r\n          outDsl.push(fa.dsl);\r\n          break;\r\n        case \"continue\":\r\n          currentState = fa.state;\r\n          break;\r\n        case \"halt\":\r\n          return fa;\r\n        case \"suspendAndResume\":\r\n          return fa;\r\n      }\r\n      currentIndex++;\r\n    }\r\n    if (outDsl.length !== fas.length) return cont(currentState);\r\n    return render(agglomerate(outDsl));\r\n  }\r\n  ","import * as TY from \"./types\";\r\nimport * as C from \"./context\";\r\nimport * as D from \"./dsl\";\r\nimport { pipe } from \"fp-ts/lib/pipeable\";\r\nimport * as S from \"fp-ts/lib/State\";\r\nimport * as A from \"fp-ts/lib/Array\";\r\nimport * as I from \"fp-ts/lib/IO\";\r\nimport * as O from \"fp-ts/lib/Option\";\r\nimport * as N from \"./data/next\";\r\nimport { identity } from \"rxjs\";\r\n\r\nexport type MarsWidgetBuilder = TY.WidgetBuilder<\r\n  \"IO\",\r\n  C.WidgetBuilderState,\r\n  C.WidgetState,\r\n  D.DSL\r\n>;\r\nexport type MarsWidget = TY.Widget<\"IO\", C.WidgetState, D.DSL>;\r\n\r\nexport const tr: (\r\n  strings: TemplateStringsArray,\r\n  ...values: string[]\r\n) => D.TranslableString = (strings, ...values) => ({\r\n  type: \"translable_string\",\r\n  strings,\r\n  values\r\n});\r\n\r\nexport const id: (\r\n  id: string\r\n) => (widget: MarsWidgetBuilder) => MarsWidgetBuilder = id => widget =>\r\n  pipe(\r\n    S.modify(C.pushId(id)),\r\n    S.chain(() => widget),\r\n    S.chainFirst(() => S.modify(C.popId()))\r\n  );\r\n\r\nexport const text: (text: D.TranslableString) => MarsWidgetBuilder = text =>\r\n  S.gets(ctx => _ => N.render(D.text(ctx.currentId, text)));\r\n\r\nexport const container: (\r\n  ...builders: MarsWidgetBuilder[]\r\n) => MarsWidgetBuilder = (...builders) =>\r\n  pipe(\r\n    A.array.sequence(S.state)(builders),\r\n    S.chain(widgets =>\r\n      S.gets<C.WidgetBuilderState, MarsWidget>(ctx => initialState =>\r\n        N.reduce(initialState, widgets, dsls =>\r\n          D.container(ctx.currentId, dsls)\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\nexport const input: (\r\n  value: string,\r\n  onChange: (newValue: string) => I.IO<void>\r\n) => MarsWidgetBuilder = (value, onChange) =>\r\n  S.gets(ctx => state => {\r\n    const isCurrentlyActive = C.isCurrentlyActive(ctx, state);\r\n    const canActivate = C.canActivate(ctx, state);\r\n    const canDeactivate = C.canDeactivate(ctx, state);\r\n    const isCurrentlyFocused = C.isCurrentlyFocused(ctx, state);\r\n    const wantsActivation = isCurrentlyFocused;\r\n\r\n    if (\r\n      isCurrentlyActive &&\r\n      !isCurrentlyFocused &&\r\n      O.isSome(state.inputBuffer) &&\r\n      !state.focusTrap\r\n    ) {\r\n      return N.suspendAndResume(\r\n        pipe(\r\n          onChange(O.getOrElse(() => value)(state.inputBuffer)),\r\n          I.map(() =>\r\n            pipe(\r\n              state,\r\n              C.setInputBuffer(O.none)\r\n            )\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    if (wantsActivation && canActivate) {\r\n      return N.cont(\r\n        pipe(\r\n          state,\r\n          C.setActiveId(O.some(ctx.currentId)),\r\n          C.setInputBuffer(O.none)\r\n        )\r\n      );\r\n    } else if (!wantsActivation && canDeactivate) {\r\n      return N.cont(C.setActiveId(O.none)(state));\r\n    }\r\n\r\n    const currentValue = isCurrentlyActive\r\n      ? O.getOrElse(() => value)(state.inputBuffer)\r\n      : value;\r\n\r\n    return N.render(\r\n      D.input(\r\n        ctx.currentId,\r\n        currentValue,\r\n        isCurrentlyActive,\r\n        isCurrentlyFocused\r\n      )\r\n    );\r\n  });\r\n\r\nexport const focusTrap: (\r\n  fn: (ctx: C.WidgetBuilderState, state: C.WidgetState) => boolean\r\n) => (widget: MarsWidgetBuilder) => MarsWidgetBuilder = fn => widget =>\r\n  pipe(\r\n    widget,\r\n    S.chain(widget =>\r\n      S.gets(ctx => prevState =>\r\n        pipe(\r\n          widget({ ...prevState, focusTrap: fn(ctx, prevState) }),\r\n          N.fold(\r\n            dsl => N.render(dsl),\r\n            state => N.cont({ ...state, focusTrap: prevState.focusTrap }),\r\n            state => N.halt({ ...state, focusTrap: prevState.focusTrap }),\r\n            effect =>\r\n              N.suspendAndResume(\r\n                pipe(\r\n                  effect,\r\n                  I.map(state => ({ ...state, focusTrap: prevState.focusTrap }))\r\n                )\r\n              )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\nconst isValidInteger = (value: string) => !isNaN(parseInt(value, 10));\r\n\r\nexport const number: (\r\n  value: number,\r\n  onChange: (newValue: number) => I.IO<void>\r\n) => MarsWidgetBuilder = (value, onChange) =>\r\n  pipe(\r\n    focusTrap(\r\n      (ctx, state) =>\r\n        C.isCurrentlyActive(ctx, state) &&\r\n        !isValidInteger(O.getOrElse(() => value.toFixed(0))(state.inputBuffer))\r\n    )(input(value.toFixed(0), newValue => onChange(parseInt(newValue, 10))))\r\n  );\r\n","import * as React from \"react\";\r\nimport * as D from \"./dsl\";\r\nimport * as C from \"./context\";\r\nimport * as I from \"fp-ts/lib/IO\";\r\nimport * as O from \"fp-ts/lib/Option\";\r\nimport * as W from \"./widgets\";\r\nimport * as dsl from \"./dsl\";\r\nimport * as hlist from \"./data/hlist\";\r\nimport { Observable, Subject, from, BehaviorSubject } from \"rxjs\";\r\nimport * as rxOp from \"rxjs/operators\";\r\nimport * as IR from \"fp-ts/lib/IORef\";\r\nimport * as RR from \"./react\";\r\nimport * as N from \"./data/next\";\r\nimport { pipe } from \"fp-ts/lib/pipeable\";\r\n\r\ntype ComponentProps = {\r\n  dsl: D.DSL;\r\n  dispatch: (f: (state: C.WidgetState) => C.WidgetState) => I.IO<void>;\r\n};\r\n\r\nfunction translate(t: D.TranslableString): string {\r\n  // TODO: this is just a stub, needs to handle number and date formatting in a localized way.\r\n  return t.strings.map((s, i) => s + (t.values[i] || \"\")).join(\"\");\r\n}\r\n\r\nexport const RenderInput = React.memo((props: ComponentProps) => {\r\n  const ref = React.useRef<HTMLInputElement>();\r\n  React.useEffect(() => {\r\n    if (\r\n      ref.current &&\r\n      props.dsl.type === \"input\" &&\r\n      props.dsl.focused &&\r\n      ref.current !== document.activeElement\r\n    ) {\r\n      ref.current.focus();\r\n    }\r\n  });\r\n  if (props.dsl.type !== \"input\") return null;\r\n\r\n  return (\r\n    <input\r\n      ref={ref as any}\r\n      type=\"text\"\r\n      value={props.dsl.value}\r\n      readOnly={!props.dsl.active}\r\n      onChange={e => props.dispatch(C.setInputBuffer(O.some(e.target.value)))()}\r\n      onFocus={props.dispatch(C.setFocusedId(O.some(props.dsl.id)))}\r\n      onBlur={props.dispatch(C.setFocusedId(O.none))}\r\n      style={props.dsl.active ? { border: \"3px solid red\" } : {}}\r\n    />\r\n  );\r\n});\r\n\r\nexport const RenderText = React.memo((props: ComponentProps) => {\r\n  if (props.dsl.type !== \"text\") return null;\r\n  return <React.Fragment>{translate(props.dsl.text)}</React.Fragment>;\r\n});\r\n\r\nexport const RenderContainer = React.memo((props: ComponentProps) => {\r\n  if (props.dsl.type !== \"container\") return null;\r\n  return (\r\n    <React.Fragment>\r\n      {props.dsl.children.map((child, i) => (\r\n        <RenderDsl {...props} key={i} dsl={child} />\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n});\r\n\r\nexport const RenderDsl = React.memo((props: ComponentProps) => {\r\n  switch (props.dsl.type) {\r\n    case \"input\":\r\n      return <RenderInput {...props} />;\r\n    case \"container\":\r\n      return <RenderContainer {...props} />;\r\n    case \"text\":\r\n      return <RenderText {...props} />;\r\n  }\r\n  return <React.Fragment>{JSON.stringify(props.dsl)}</React.Fragment>;\r\n});\r\n\r\nexport class AppRunner<A> extends React.Component<\r\n  { getApp: I.IO<W.MarsWidgetBuilder> },\r\n  C.WidgetState\r\n> {\r\n  state = C.initialWidgetState;\r\n  app: W.MarsWidget;\r\n\r\n  constructor(props: { getApp: I.IO<W.MarsWidgetBuilder> }) {\r\n    super(props);\r\n    this.app = this.getApp(props);\r\n  }\r\n\r\n  getApp(props: { getApp: I.IO<W.MarsWidgetBuilder> }) {\r\n    return props.getApp()(C.initialWidgetBuilderState)[0];\r\n  }\r\n\r\n  eventLoop: (initialState: C.WidgetState) => C.WidgetState = initialState => {\r\n    let lastState = initialState;\r\n    let numLoops = 0;\r\n    while (numLoops < 10) {\r\n      const nextState = this.app(lastState);\r\n      switch (nextState.type) {\r\n        case \"render\":\r\n          return lastState;\r\n        case \"continue\":\r\n          lastState = nextState.state;\r\n          break;\r\n        case \"suspendAndResume\":\r\n          lastState = nextState.effect();\r\n          this.app = this.getApp(this.props);\r\n          break;\r\n        case \"halt\":\r\n          lastState = nextState.state;\r\n          break;\r\n      }\r\n      numLoops++;\r\n    }\r\n    console.warn(\"end of max loop count\");\r\n    return lastState;\r\n  };\r\n\r\n  componentWillMount() {\r\n    this.setState(state => this.eventLoop(state));\r\n  }\r\n\r\n  dispatch: (\r\n    f: (state: C.WidgetState) => C.WidgetState\r\n  ) => I.IO<void> = f => () => this.setState(state => this.eventLoop(f(state)));\r\n\r\n  render() {\r\n    const output = this.app(this.state);\r\n\r\n    return pipe(\r\n      output,\r\n      N.fold(\r\n        dsl => <RR.RenderDsl dsl={dsl} dispatch={this.dispatch} />,\r\n        newState => <React.Fragment>continuing...</React.Fragment>,\r\n        newState => <React.Fragment>halting...</React.Fragment>,\r\n        effect => <React.Fragment>effect...</React.Fragment>\r\n      )\r\n    );\r\n  }\r\n}\r\n","import * as W from \"./widgets\";\r\nimport * as C from \"./context\";\r\nimport * as dsl from \"./dsl\";\r\nimport * as hlist from \"./data/hlist\";\r\nimport * as React from \"react\";\r\nimport { Observable, Subject, from, BehaviorSubject } from \"rxjs\";\r\nimport * as rxOp from \"rxjs/operators\";\r\nimport * as I from \"fp-ts/lib/IO\";\r\nimport * as IR from \"fp-ts/lib/IORef\";\r\nimport * as O from \"fp-ts/lib/Option\";\r\nimport * as RR from \"./react\";\r\nimport * as N from \"./data/next\";\r\nimport { pipe } from \"fp-ts/lib/pipeable\";\r\n\r\ntype Model = {\r\n  name: string;\r\n  surname: string;\r\n  age: number;\r\n};\r\n\r\nfunction render(model: Model) {\r\n  return (update: (newModel: Model) => I.IO<void>) =>\r\n    W.container(\r\n      W.container(\r\n        W.text(W.tr`Età:`),\r\n        W.id(\"age\")(W.number(model.age, age => update({ ...model, age })))\r\n      ),\r\n      W.container(\r\n        W.text(W.tr`Nome:`),\r\n        W.id(\"name\")(W.input(model.name, name => update({ ...model, name })))\r\n      ),\r\n      W.container(\r\n        W.text(W.tr`Cognome:`),\r\n        W.id(\"surname\")(\r\n          W.input(model.surname, surname => update({ ...model, surname }))\r\n        )\r\n      ),\r\n      W.text(\r\n        W.tr`Ciao ${model.name} ${\r\n          model.surname\r\n        }, complimenti per i tuoi ${model.age.toFixed(0)} anni!`\r\n      )\r\n    );\r\n}\r\n\r\nlet appModel: Model = {\r\n  name: \"\",\r\n  surname: \"\",\r\n  age: 0\r\n};\r\n\r\nexport function App() {\r\n  return (\r\n    <RR.AppRunner\r\n      getApp={() => {\r\n        return render(appModel)(newValue => {\r\n          console.log(\"STATE UPDATE\", newValue);\r\n          return () => {\r\n            console.log(\"STATE UPDATED\", newValue);\r\n            appModel = newValue;\r\n          };\r\n        });\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as S from './lib/sample'\r\n\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n    const {whyDidYouUpdate} = require('why-did-you-update');\r\n    whyDidYouUpdate(React, { include: [/^Rend/], exclude: [/^Connect/] });\r\n  }\r\n\r\nconsole.log(S)\r\nReactDOM.render(<S.App />, document.getElementById(\"root\"))\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}